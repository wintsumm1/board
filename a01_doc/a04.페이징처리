# 페이징 처리
1. 목적 : 게시판의 글이 늘어나면 웹화면에서 보일 수 있는 한계에 이르게 되어,
	효율적으로 한 화면에 보일 수 있는 데이터 건수로 확인할 때가 필요한다.
	이 때, 한 화면에서 보이는 데이터 건수를 지정하고, 그 외에는 하단/상단에
	페이지 블럭을 통해서 처리하면 보다 효율적으로 많은 데이터도 브라우저의
	부담을 줄여서 볼 수 있다.
2. 주요 화면 ui 및 기능
	1) 한번에 보일 수 있는 건수를 선택할 수 있다..
		ex) 5건  [select - 3,5,10,15]
	2) 해당 건수를 기준을 하단/상단에 페이지 블럭을 처리한다.
			1
			2
			3
			4
			5
				 [ 1][ 2][ 3][ 4][ 5]>
				<[ 6][ 7][ 8][ 9][10]>
				<[10][12][13][14][15]>
	3) 하단에 페이지 번호를 클릭시, 예를들어 2번째를 클릭하면,
		6,7,8,9,10 데이터가 보이게 처리한다..
3. 개발 순서
	1) sql 작성..
		select rownum 
		from ...
		where rownum between 1 and 5
		5개씩 1 page인 경우  1~5
			 2 page인 경우  6~10
			 3 page인 경우  11~15
			 ...
		 SELECT count(*)
		 FROM board;
		
		 SELECT * 
		 FROM (
			 select rownum cnt, level, b.*  
			 from board b 
			 WHERE 1=1
			 start with refno = 0
			 connect by prior no = refno
			 order siblings by no DESC )
		 WHERE cnt BETWEEN 1 AND 5;
		하단의 속성을 처리한 boardsch vo 생성(공통 mybatis부분에 등록) 
		 	
		dao
			public List<Board> totCnt(BoardSch sch);
		mapper
			총건수 sql 처리..
			<select id="boardList" resultType="board"
		 			parameterType="boardsch">			
			 SELECT * 
			 FROM (			
				 select rownum cnt, level, b.*  
				 from board b 
				 WHERE 1=1
				 <if test="subject!=null">
				 AND subject LIKE '%'||#{subject}||'%'
				 </if>
				 <if test="writer!=null">
				 AND writer LIKE '%'||#{writer}||'%'
				 </if>
				 start with refno = 0
				 connect by prior no = refno
				 order siblings by no desc )	
			 WHERE cnt BETWEEN 1 AND 5	
		 <select id="totCnt" parameterType="boardsch">	 
			 SELECT count(*)
			 	FROM board
			 WHERE 1=1		 
			 <if test="subject!=null">
			 AND subject LIKE '%'||#{subject}||'%'
			 </if>
			 <if test="writer!=null">
			 AND writer LIKE '%'||#{writer}||'%'
			 </if>			 	 			 
		 </select>	 
	2) 검색시 필요한 속성을 vo로 설정
		#기본 페이징 속성
		전체건수 :  count
		한번에보여줄 건수 : pageSize
		총페이지 수 : pageCount
		클릭한 현재 페이지번호 : curPage
		해당 페이지의 시작번호 : start
		해당 페이지의 마지막번호 : end
		
		#페이지 블럭 처리..
		하단에 한번에 보여줄 block의 크기 : blockSize
		block의 시작번호 : startBlock
		block의 마지막번호 : endBlock
	3) service단 로직 처리
		
	
	4) 뷰단 화면 구성..
		
		
		
#client vs server 관점에서 답변 게시판 페이지 처리 이해 하기.
1.화면
	총건:@@@		페이지건수(3/5/10/20/30)
	
	1
	2
	3
	4
	5
	<-[1][2][3][4][5]->
	<-[6][7][8][9][10]->
	<-[11][12][13][14][15]->
	
2. 처리 로직
	1)backend 프로그램(server)
		-db sql : 
		select rownum cnt...
		where cnt between ${start} and #{end} -화면에 데이터 리스트 표시
		-service
		총건수 : dao.getTotCnt() [DB]
		페이지당 건수 : 화면에서 요청값
		전체페이지수 : 총건수/페이당건수 - 올림처리
		클릭한현재페이지 번호 : 요청값
		end(마지막번호) : 페이지당 건수 * 클릭한현재페이지번호
		start(시작번호) : (페이지당 건수-1) * 클릭한현재페이지번호 +1
		-------
		하단의 블럭 처리리스트 : 페이지를 블럭단위(5개)씩 출력해서 나오게 하고 화살표 좌우를 통해
		다음/이전 블럭을 처리함으로 많은 데이터를 효율적으로 처리하기 위한 로직이다.
		블럭번호 : 기준으로 해당 블럭의 시작 번호와 마지막 번호를 나오게 하기 때문에 속성을 설정하여야 한다.
			시작점 : 현재 클릭한 페이지 번호를 요청값으로 전송했을 때, 처리되어야 한다.
			페이지당 건수/클릭한페이지번호 올림처리..
		한번에 보여줄 블럭의 크기 ? [1][2][3][4][5] : 5개로 고정 처리...
		블럭의 시작번호 : (블럭번호 -1)
		블럭의 마지막번호 : 한번에 보여줄 블럭의 크키 * 블럭번호
		-부가적인 예외 처리
		클릭한 현재 페이지 번호 : 초기 화면에 없으므로 이것을 1로 강제 처리
			if(sch.getCurPage()==0) sch.setCurPage(1);
		페이지당 건수 : 초기화면에는 없으므로 이것을 5로 default 처리
			if(sch.getPageSize)==0) sch.setPageSize(5);
		마지막 페이지에서 보여줄 데이터는 총페이지수 이하이어야 한다.
			if(end > sch.getCount()) sch.setEnd(sch.getCount();
			<-[11][12][13]-> 3
			이와값이 블럭의 시작과 마지막을 블럭번호와 블건당건수를 기준으로 할때, 총페이지수보다
			많아질 수도 있으니, 마지막 블럭번호는 총페이지수로 처리한다.
			마지막 블럭에서 이후에 
			
	
	
	2)frontend프로그램
		<form>
			<input type="hidden" name="curPage" value="0"/>
			javascript: goPage(${bd.cnt})
			function goPage(cnt){
				$("[name=curPage]").val(cnt);
				}
		<-<-[6][7][8][9][10]->
		이전과 이후를 눌렀을 때, 이전 블럭이나 다음 블럭이 나타나기 위해
		이전에는 javascript:goPage($
		
		
		
				
		
	
	
				 
			 







							